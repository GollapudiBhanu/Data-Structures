# -*- coding: utf-8 -*-
"""Stacks.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hTrrmXEv4T8iFUV-8elueMrb2Kvjt_zU

We can Implement Stacks using Three ways in Python. 

1. List 
2. Collections.Deque
3. queue.LifoQueue

# LIST
"""

class Stack:
  def __init__(self):
    self.stack = []
  
  def push(self, element):
    self.stack.append(element)
    print("The updated Stack is:",self.stack)

  def pop(self):
    print("Pop element:", self.stack.pop())

  def sizeOfStack(self):
    print(self.stack)
    print("######## Stack size is ###########")
    print(len(self.stack))

stack = Stack()

#Push operation:

for i in range(1, 10):
  stack.push(i)

# Pop Operation
stack.sizeOfStack()

stack.pop()

"""# collections.deque"""

from collections import deque

class Stack:
  def __init__(self):
    self.stack = deque()
  
  def push(self, element):
    self.stack.append(element)
    print("The updated Stack is:",self.stack)

  def pop(self):
    print("Pop element:", self.stack.pop())

  def sizeOfStack(self):
    print(self.stack)
    print("######## Stack size is ###########")
    print(len(self.stack))

stack = Stack()

#Push operation:

for i in range(1, 10):
  stack.push(i)

# Pop Operation


for i in range(1, 8):
  stack.sizeOfStack()
  stack.pop()

"""# queue.LifoQueue

"""

from queue import LifoQueue

class Stack:
  def __init__(self):
    self.stack = LifoQueue(maxsize = 0)
  
  def push(self, element):
    self.stack.put(element)
    print(self.stack.queue)

  def pop(self):
    print("Pop element:", self.stack.get())

  def sizeOfStack(self):
    print(self.stack.queue)
    print("######## Stack size is ###########")
    print(self.stack.qsize)

stack = Stack()

#Push operation:

for i in range(1, 10):
  stack.push(i)

# Pop Operation

for i in range(1, 8):
  stack.sizeOfStack()
  stack.pop()